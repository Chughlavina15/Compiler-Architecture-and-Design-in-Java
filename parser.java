
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\007\000\002\002\004\000\002\003" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\004\000\002\005\002\000\002\006\007\000" +
    "\002\006\006\000\002\006\010\000\002\015\004\000\002" +
    "\015\002\000\002\007\004\000\002\007\002\000\002\010" +
    "\014\000\002\010\013\000\002\011\003\000\002\011\002" +
    "\000\002\013\005\000\002\013\003\000\002\012\004\000" +
    "\002\012\006\000\002\016\004\000\002\016\002\000\002" +
    "\016\012\000\002\016\010\000\002\017\007\000\002\017" +
    "\006\000\002\017\007\000\002\017\007\000\002\017\007" +
    "\000\002\017\006\000\002\017\007\000\002\017\004\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\007\000\002\017\006\000\002\022\005\000\002\022" +
    "\003\000\002\021\003\000\002\021\006\000\002\024\003" +
    "\000\002\024\002\000\002\023\005\000\002\023\003\000" +
    "\002\026\003\000\002\026\002\000\002\025\005\000\002" +
    "\025\003\000\002\020\003\000\002\020\005\000\002\020" +
    "\006\000\002\020\005\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\020\006\000\002\020\003\000\002\020" +
    "\011\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\005\000\002\027" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\004\005\001\002\000\004\002\266\001" +
    "\002\000\004\057\006\001\002\000\004\005\007\001\002" +
    "\000\020\006\ufffc\007\020\020\014\021\011\022\022\024" +
    "\012\025\021\001\002\000\020\006\ufffc\007\020\020\014" +
    "\021\011\022\022\024\012\025\021\001\002\000\006\012" +
    "\uffbd\057\uffbd\001\002\000\006\012\uffbb\057\uffbb\001\002" +
    "\000\004\006\264\001\002\000\006\012\uffb9\057\uffb9\001" +
    "\002\000\004\006\uffff\001\002\000\004\057\263\001\002" +
    "\000\016\006\ufff3\020\014\021\011\022\022\024\012\025" +
    "\021\001\002\000\014\020\014\021\011\022\022\024\012" +
    "\025\021\001\002\000\006\012\uffbc\057\uffbc\001\002\000" +
    "\006\012\uffba\057\uffba\001\002\000\004\057\024\001\002" +
    "\000\006\010\025\013\ufff5\001\002\000\030\011\045\026" +
    "\034\027\037\030\036\032\030\035\044\057\040\060\041" +
    "\061\032\062\033\063\043\001\002\000\004\013\027\001" +
    "\002\000\040\005\ufff9\006\ufff9\007\ufff9\020\ufff9\021\ufff9" +
    "\022\ufff9\024\ufff9\025\ufff9\036\ufff9\040\ufff9\041\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\057\ufff9\001\002\000\030\011\045" +
    "\026\034\027\037\030\036\032\030\035\044\057\040\060" +
    "\041\061\032\062\033\063\043\001\002\000\046\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\017\uffcd\030\uffcd\031\uffcd\032" +
    "\uffcd\033\uffcd\034\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd" +
    "\053\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000\046\012" +
    "\uffc9\013\uffc9\014\uffc9\015\uffc9\017\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\047\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\001\002\000\046" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\017\uffc6\030\uffc6\031" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\047\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\046\012\uffc5\013\uffc5\014\uffc5\015\uffc5\017\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\047\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002" +
    "\000\046\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\047\uffbf\050\uffbf" +
    "\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\001" +
    "\002\000\030\011\045\026\034\027\037\030\036\032\030" +
    "\035\044\057\040\060\041\061\032\062\033\063\043\001" +
    "\002\000\046\012\uffc4\013\uffc4\014\uffc4\015\uffc4\017\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4" +
    "\001\002\000\052\011\112\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\111\017\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\001\002\000\046\012\uffc7\013\uffc7" +
    "\014\uffc7\015\uffc7\017\uffc7\030\uffc7\031\uffc7\032\uffc7\033" +
    "\uffc7\034\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\001\002\000\034\013\ufff6\030" +
    "\060\032\053\033\057\034\054\047\063\050\061\051\056" +
    "\052\064\053\062\054\055\055\052\056\065\001\002\000" +
    "\046\012\uffc8\013\uffc8\014\uffc8\015\uffc8\017\uffc8\030\uffc8" +
    "\031\uffc8\032\uffc8\033\uffc8\034\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8\001\002" +
    "\000\030\011\045\026\034\027\037\030\036\032\030\035" +
    "\044\057\040\060\041\061\032\062\033\063\043\001\002" +
    "\000\042\011\045\020\014\021\011\022\022\024\012\025" +
    "\021\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\036\012" +
    "\102\030\060\031\103\032\053\033\057\034\054\047\063" +
    "\050\061\051\056\052\064\053\062\054\055\055\052\056" +
    "\065\001\002\000\004\012\050\001\002\000\030\011\045" +
    "\026\034\027\037\030\036\032\030\035\044\057\040\060" +
    "\041\061\032\062\033\063\043\001\002\000\046\012\uffc0" +
    "\013\uffc0\014\uffc0\015\uffc0\017\uffc0\030\060\031\uffc0\032" +
    "\053\033\057\034\054\047\063\050\061\051\056\052\064" +
    "\053\062\054\055\055\052\056\065\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\046\012" +
    "\uffae\013\uffae\014\uffae\015\uffae\017\uffae\030\060\031\uffae" +
    "\032\053\033\057\034\054\047\063\050\061\051\056\052" +
    "\064\053\062\054\055\055\052\056\uffae\001\002\000\046" +
    "\012\uffb1\013\uffb1\014\uffb1\015\uffb1\017\uffb1\030\060\031" +
    "\uffb1\032\053\033\057\034\054\047\uffb1\050\uffb1\051\uffb1" +
    "\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\001\002\000" +
    "\046\012\uffb4\013\uffb4\014\uffb4\015\uffb4\017\uffb4\030\060" +
    "\031\uffb4\032\053\033\057\034\054\047\uffb4\050\uffb4\051" +
    "\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\001\002" +
    "\000\046\012\uffb0\013\uffb0\014\uffb0\015\uffb0\017\uffb0\030" +
    "\060\031\uffb0\032\053\033\057\034\054\047\063\050\061" +
    "\051\056\052\064\053\uffb0\054\uffb0\055\uffb0\056\uffb0\001" +
    "\002\000\046\012\uffb3\013\uffb3\014\uffb3\015\uffb3\017\uffb3" +
    "\030\060\031\uffb3\032\053\033\057\034\054\047\uffb3\050" +
    "\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\001\002\000\046\012\uffb6\013\uffb6\014\uffb6\015\uffb6\017" +
    "\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056" +
    "\uffb6\001\002\000\046\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\017\uffb8\030\060\031\uffb8\032\053\033\uffb8\034\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8" +
    "\056\uffb8\001\002\000\046\012\uffb2\013\uffb2\014\uffb2\015" +
    "\uffb2\017\uffb2\030\060\031\uffb2\032\053\033\057\034\054" +
    "\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\001\002\000\046\012\uffaf\013\uffaf\014\uffaf" +
    "\015\uffaf\017\uffaf\030\060\031\uffaf\032\053\033\057\034" +
    "\054\047\063\050\061\051\056\052\064\053\uffaf\054\uffaf" +
    "\055\uffaf\056\uffaf\001\002\000\046\012\uffb7\013\uffb7\014" +
    "\uffb7\015\uffb7\017\uffb7\030\060\031\uffb7\032\053\033\uffb7" +
    "\034\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053\uffb7\054" +
    "\uffb7\055\uffb7\056\uffb7\001\002\000\046\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\017\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\054\uffb5\055\uffb5\056\uffb5\001\002\000\046\012\uffad\013" +
    "\uffad\014\uffad\015\uffad\017\uffad\030\060\031\uffad\032\053" +
    "\033\057\034\054\047\063\050\061\051\056\052\064\053" +
    "\062\054\055\055\uffad\056\uffad\001\002\000\046\012\uffca" +
    "\013\uffca\014\uffca\015\uffca\017\uffca\030\uffca\031\uffca\032" +
    "\uffca\033\uffca\034\uffca\047\uffca\050\uffca\051\uffca\052\uffca" +
    "\053\uffca\054\uffca\055\uffca\056\uffca\001\002\000\030\011" +
    "\045\026\034\027\037\030\036\032\030\035\044\057\040" +
    "\060\041\061\032\062\033\063\043\001\002\000\034\014" +
    "\105\030\060\032\053\033\057\034\054\047\063\050\061" +
    "\051\056\052\064\053\062\054\055\055\052\056\065\001" +
    "\002\000\030\011\045\026\034\027\037\030\036\032\030" +
    "\035\044\057\040\060\041\061\032\062\033\063\043\001" +
    "\002\000\034\012\107\030\060\032\053\033\057\034\054" +
    "\047\063\050\061\051\056\052\064\053\062\054\055\055" +
    "\052\056\065\001\002\000\046\012\uffbe\013\uffbe\014\uffbe" +
    "\015\uffbe\017\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\056\uffbe\001\002\000\046\012\uffc3\013\uffc3\014" +
    "\uffc3\015\uffc3\017\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3" +
    "\034\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\030\011\045\026\034" +
    "\027\037\030\036\032\030\035\044\057\040\060\041\061" +
    "\032\062\033\063\043\001\002\000\032\011\045\012\114" +
    "\026\034\027\037\030\036\032\030\035\044\057\040\060" +
    "\041\061\032\062\033\063\043\001\002\000\004\012\120" +
    "\001\002\000\046\012\uffcc\013\uffcc\014\uffcc\015\uffcc\017" +
    "\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\001\002\000\036\012\uffce\015\116\030\060\032\053" +
    "\033\057\034\054\047\063\050\061\051\056\052\064\053" +
    "\062\054\055\055\052\056\065\001\002\000\030\011\045" +
    "\026\034\027\037\030\036\032\030\035\044\057\040\060" +
    "\041\061\032\062\033\063\043\001\002\000\004\012\uffcf" +
    "\001\002\000\046\012\uffcb\013\uffcb\014\uffcb\015\uffcb\017" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\001\002\000\034\017\122\030\060\032\053\033\057" +
    "\034\054\047\063\050\061\051\056\052\064\053\062\054" +
    "\055\055\052\056\065\001\002\000\054\010\uffd6\012\uffd6" +
    "\013\uffd6\014\uffd6\015\uffd6\017\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\034\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\001" +
    "\002\000\046\012\uffc2\013\uffc2\014\uffc2\015\uffc2\017\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2\056\uffc2" +
    "\001\002\000\046\012\uffc1\013\uffc1\014\uffc1\015\uffc1\017" +
    "\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056" +
    "\uffc1\001\002\000\004\006\ufffd\001\002\000\016\006\ufff3" +
    "\020\014\021\011\022\022\024\012\025\021\001\002\000" +
    "\004\057\130\001\002\000\004\011\131\001\002\000\016" +
    "\012\uffef\020\014\021\011\022\022\024\012\025\021\001" +
    "\002\000\006\012\uffed\015\260\001\002\000\004\012\141" +
    "\001\002\000\004\012\ufff0\001\002\000\004\057\136\001" +
    "\002\000\010\012\uffec\015\uffec\016\137\001\002\000\004" +
    "\017\140\001\002\000\006\012\uffeb\015\uffeb\001\002\000" +
    "\004\005\142\001\002\000\040\005\ufffa\006\ufffa\007\020" +
    "\020\014\021\011\022\022\024\012\025\021\036\ufffa\040" +
    "\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\057\ufffa\001\002" +
    "\000\040\005\ufffa\006\ufffa\007\020\020\014\021\011\022" +
    "\022\024\012\025\021\036\ufffa\040\ufffa\041\ufffa\042\ufffa" +
    "\043\ufffa\044\ufffa\057\ufffa\001\002\000\024\005\161\006" +
    "\uffe9\036\163\040\156\041\155\042\165\043\167\044\166" +
    "\057\164\001\002\000\004\057\146\001\002\000\010\010" +
    "\025\013\ufff5\016\147\001\002\000\004\061\152\001\002" +
    "\000\004\013\151\001\002\000\040\005\ufff8\006\ufff8\007" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8\025\ufff8\036\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8\057\ufff8\001" +
    "\002\000\004\017\153\001\002\000\004\013\154\001\002" +
    "\000\040\005\ufff7\006\ufff7\007\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7" +
    "\043\ufff7\044\ufff7\057\ufff7\001\002\000\004\011\247\001" +
    "\002\000\004\011\243\001\002\000\010\010\235\045\236" +
    "\046\234\001\002\000\004\006\232\001\002\000\040\005" +
    "\ufffa\006\ufffa\007\020\020\014\021\011\022\022\024\012" +
    "\025\021\036\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044" +
    "\ufffa\057\ufffa\001\002\000\024\005\161\006\uffe9\036\163" +
    "\040\156\041\155\042\165\043\167\044\166\057\164\001" +
    "\002\000\004\011\215\001\002\000\014\010\uffd7\011\207" +
    "\016\111\045\uffd7\046\uffd7\001\002\000\004\011\203\001" +
    "\002\000\032\011\045\013\200\026\034\027\037\030\036" +
    "\032\030\035\044\057\040\060\041\061\032\062\033\063" +
    "\043\001\002\000\004\011\170\001\002\000\032\011\045" +
    "\012\uffd4\026\034\027\037\030\036\032\030\035\044\057" +
    "\040\060\041\061\032\062\033\063\043\001\002\000\004" +
    "\012\176\001\002\000\004\012\uffd5\001\002\000\036\012" +
    "\uffd2\015\174\030\060\032\053\033\057\034\054\047\063" +
    "\050\061\051\056\052\064\053\062\054\055\055\052\056" +
    "\065\001\002\000\030\011\045\026\034\027\037\030\036" +
    "\032\030\035\044\057\040\060\041\061\032\062\033\063" +
    "\043\001\002\000\004\012\uffd3\001\002\000\004\013\177" +
    "\001\002\000\026\005\uffe2\006\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\057\uffe2\001\002" +
    "\000\026\005\uffdf\006\uffdf\036\uffdf\037\uffdf\040\uffdf\041" +
    "\uffdf\042\uffdf\043\uffdf\044\uffdf\057\uffdf\001\002\000\034" +
    "\013\202\030\060\032\053\033\057\034\054\047\063\050" +
    "\061\051\056\052\064\053\062\054\055\055\052\056\065" +
    "\001\002\000\026\005\uffde\006\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\057\uffde\001\002" +
    "\000\030\011\045\026\034\027\037\030\036\032\030\035" +
    "\044\057\040\060\041\061\032\062\033\063\043\001\002" +
    "\000\004\012\205\001\002\000\004\013\206\001\002\000" +
    "\026\005\uffe3\006\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\044\uffe3\057\uffe3\001\002\000\032\011" +
    "\045\012\211\026\034\027\037\030\036\032\030\035\044" +
    "\057\040\060\041\061\032\062\033\063\043\001\002\000" +
    "\004\012\213\001\002\000\004\013\212\001\002\000\026" +
    "\005\uffe1\006\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042" +
    "\uffe1\043\uffe1\044\uffe1\057\uffe1\001\002\000\004\013\214" +
    "\001\002\000\026\005\uffe0\006\uffe0\036\uffe0\037\uffe0\040" +
    "\uffe0\041\uffe0\042\uffe0\043\uffe0\044\uffe0\057\uffe0\001\002" +
    "\000\030\011\045\026\034\027\037\030\036\032\030\035" +
    "\044\057\040\060\041\061\032\062\033\063\043\001\002" +
    "\000\034\012\217\030\060\032\053\033\057\034\054\047" +
    "\063\050\061\051\056\052\064\053\062\054\055\055\052" +
    "\056\065\001\002\000\020\005\161\040\156\041\155\042" +
    "\165\043\167\044\166\057\164\001\002\000\026\005\161" +
    "\006\uffe9\036\163\037\222\040\156\041\155\042\165\043" +
    "\167\044\166\057\164\001\002\000\004\006\uffe7\001\002" +
    "\000\020\005\161\040\156\041\155\042\165\043\167\044" +
    "\166\057\164\001\002\000\024\005\161\006\uffe9\036\163" +
    "\040\156\041\155\042\165\043\167\044\166\057\164\001" +
    "\002\000\004\006\uffe8\001\002\000\004\006\uffea\001\002" +
    "\000\024\005\161\006\uffe9\036\163\040\156\041\155\042" +
    "\165\043\167\044\166\057\164\001\002\000\004\006\230" +
    "\001\002\000\030\005\uffda\006\uffda\013\231\036\uffda\037" +
    "\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044\uffda\057\uffda" +
    "\001\002\000\026\005\uffdb\006\uffdb\036\uffdb\037\uffdb\040" +
    "\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\057\uffdb\001\002" +
    "\000\020\006\ufff1\013\233\020\ufff1\021\ufff1\022\ufff1\024" +
    "\ufff1\025\ufff1\001\002\000\016\006\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\024\ufff2\025\ufff2\001\002\000\004\013\242\001" +
    "\002\000\030\011\045\026\034\027\037\030\036\032\030" +
    "\035\044\057\040\060\041\061\032\062\033\063\043\001" +
    "\002\000\004\013\237\001\002\000\026\005\uffdd\006\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044" +
    "\uffdd\057\uffdd\001\002\000\034\013\241\030\060\032\053" +
    "\033\057\034\054\047\063\050\061\051\056\052\064\053" +
    "\062\054\055\055\052\056\065\001\002\000\026\005\uffe5" +
    "\006\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043" +
    "\uffe5\044\uffe5\057\uffe5\001\002\000\026\005\uffdc\006\uffdc" +
    "\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044" +
    "\uffdc\057\uffdc\001\002\000\030\011\045\026\034\027\037" +
    "\030\036\032\030\035\044\057\040\060\041\061\032\062" +
    "\033\063\043\001\002\000\034\012\245\030\060\032\053" +
    "\033\057\034\054\047\063\050\061\051\056\052\064\053" +
    "\062\054\055\055\052\056\065\001\002\000\020\005\161" +
    "\040\156\041\155\042\165\043\167\044\166\057\164\001" +
    "\002\000\026\005\uffe6\006\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\041\uffe6\042\uffe6\043\uffe6\044\uffe6\057\uffe6\001\002\000" +
    "\004\057\250\001\002\000\010\012\uffd7\015\uffd7\016\111" +
    "\001\002\000\004\012\255\001\002\000\006\012\uffd8\015" +
    "\253\001\002\000\004\057\250\001\002\000\004\012\uffd9" +
    "\001\002\000\004\013\256\001\002\000\026\005\uffe4\006" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\057\uffe4\001\002\000\024\005\ufffb\006\ufffb\036" +
    "\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\057\ufffb" +
    "\001\002\000\014\020\014\021\011\022\022\024\012\025" +
    "\021\001\002\000\004\012\uffee\001\002\000\004\006\ufff4" +
    "\001\002\000\012\010\025\011\131\013\ufff5\016\147\001" +
    "\002\000\004\002\001\001\002\000\004\006\ufffe\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\003\012\004\014" +
    "\006\007\010\016\014\015\001\001\000\012\004\264\006" +
    "\007\010\016\014\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\124\010\125\014\126" +
    "\001\001\000\004\014\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\025\001\001" +
    "\000\010\020\041\021\030\027\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\123\021\030\027\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\122" +
    "\021\030\027\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\107\021\030\027\034\001\001\000\012\014" +
    "\046\020\045\021\030\027\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\050\021\030\027\034\001" +
    "\001\000\002\001\001\000\010\020\100\021\030\027\034" +
    "\001\001\000\010\020\077\021\030\027\034\001\001\000" +
    "\010\020\076\021\030\027\034\001\001\000\010\020\075" +
    "\021\030\027\034\001\001\000\010\020\074\021\030\027" +
    "\034\001\001\000\010\020\073\021\030\027\034\001\001" +
    "\000\010\020\072\021\030\027\034\001\001\000\010\020" +
    "\071\021\030\027\034\001\001\000\010\020\070\021\030" +
    "\027\034\001\001\000\010\020\067\021\030\027\034\001" +
    "\001\000\010\020\066\021\030\027\034\001\001\000\010" +
    "\020\065\021\030\027\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\103\021" +
    "\030\027\034\001\001\000\002\001\001\000\010\020\105" +
    "\021\030\027\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\120\021\030\027\034" +
    "\001\001\000\012\020\114\021\030\025\112\027\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\114\021\030\025\116\027\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\261\010\125\014\126\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\132\012\131\013" +
    "\133\014\134\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\143\006\142\014\144\001\001\000\010\005\256\006" +
    "\142\014\144\001\001\000\010\016\157\017\161\021\156" +
    "\001\001\000\002\001\001\000\004\015\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\225\006\142\014\144\001\001\000\010\016" +
    "\224\017\161\021\156\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\020\200\021\030\027" +
    "\034\001\001\000\002\001\001\000\014\020\172\021\030" +
    "\023\171\024\170\027\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\172\021\030" +
    "\023\174\027\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\172\021\030\023\203\027" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\114\021\030\025\207\027\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\215\021" +
    "\030\027\034\001\001\000\002\001\001\000\006\017\217" +
    "\021\156\001\001\000\010\016\220\017\161\021\156\001" +
    "\001\000\002\001\001\000\006\017\222\021\156\001\001" +
    "\000\010\016\223\017\161\021\156\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\016\226\017\161\021\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\237\021\030\027\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\243\021\030\027\034\001" +
    "\001\000\002\001\001\000\006\017\245\021\156\001\001" +
    "\000\002\001\001\000\006\021\251\022\250\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\251\022\253\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\131" +
    "\013\260\014\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\147\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= CLASS ID CURLY_OPEN memberDeclarations CURLY_CLOSE 
            {
              Program RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int memberDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int memberDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Memberdecls memberDecls = (Memberdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Program(id, memberDecls); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberDeclarations ::= members 
            {
              Memberdecls RESULT =null;
		int membrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int membrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Members membrs = (Members)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Memberdecls(membrs);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("memberDeclarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // members ::= fieldDeclaration members 
            {
              Members RESULT =null;
		int fieldDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fieldDecl = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int membrsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int membrsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Members membrs = (Members)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Members(fieldDecl, membrs);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("members",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // members ::= methodDeclaration methodDeclarations 
            {
              Members RESULT =null;
		int methodDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int methodDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl methodDecl = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int methodDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int methodDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls methodDecls = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Members(methodDecl, methodDecls);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("members",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // members ::= 
            {
              Members RESULT =null;
			RESULT = new Members();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("members",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fieldDeclarations ::= fieldDeclaration fieldDeclarations 
            {
              Fielddecls RESULT =null;
		int fieldDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fieldDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Fielddecl fieldDecl = (Fielddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fieldDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fieldDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Fielddecls fieldDecls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = fieldDecls.prepend(fieldDecl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldDeclarations ::= 
            {
              Fielddecls RESULT =null;
			RESULT = new Fielddecls();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldDeclaration ::= FINAL type ID optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optionalExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optionalExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr optionalExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Fielddecl("final", type, id, optionalExpression);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldDeclaration ::= type ID optionalexpr SEMICOLON 
            {
              Fielddecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int optionalExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optionalExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr optionalExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Fielddecl("", type, id, optionalExpression);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fieldDeclaration ::= type ID SQUARE_OPEN INTLIT SQUARE_CLOSE SEMICOLON 
            {
              Fielddecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int integerLiteralleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int integerLiteralright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		int integerLiteral = (int)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Fielddecl(type, id, integerLiteral);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optionalexpr ::= EQUALS expr 
            {
              Expr RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = expression;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalexpr ::= 
            {
              Expr RESULT =null;
			RESULT = null;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalexpr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methodDeclarations ::= methodDeclaration methodDeclarations 
            {
              Methoddecls RESULT =null;
		int methodDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int methodDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Methoddecl methodDecl = (Methoddecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int methodDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int methodDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Methoddecls methodDecls = (Methoddecls)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = methodDecls.prepend(methodDecl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclarations",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // methodDeclarations ::= 
            {
              Methoddecls RESULT =null;
			RESULT = new Methoddecls();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclarations",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // methodDeclaration ::= type ID ROUND_OPEN argDeclarations ROUND_CLOSE CURLY_OPEN fieldDeclarations stmts CURLY_CLOSE SEMICOLON 
            {
              Methoddecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int argDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int argDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Argdecls argDecls = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fieldDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fieldDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fieldDecls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts statements = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Methoddecl(type, id, argDecls, fieldDecls, statements, true);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // methodDeclaration ::= type ID ROUND_OPEN argDeclarations ROUND_CLOSE CURLY_OPEN fieldDeclarations stmts CURLY_CLOSE 
            {
              Methoddecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int argDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int argDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Argdecls argDecls = (Argdecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fieldDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fielddecls fieldDecls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmts statements = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Methoddecl(type, id, argDecls, fieldDecls, statements, false);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("methodDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argDeclarations ::= argDeclarationsList 
            {
              Argdecls RESULT =null;
		int argDeclsListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argDeclsListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList argDeclsList = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Argdecls(argDeclsList);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDeclarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argDeclarations ::= 
            {
              Argdecls RESULT =null;
			RESULT = new Argdecls();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDeclarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argDeclarationsList ::= argDeclaration COMMA argDeclarationsList 
            {
              ArgdeclList RESULT =null;
		int argDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argdecl argDecl = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArgdeclList argDeclList = (ArgdeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ArgdeclList(argDecl, argDeclList);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDeclarationsList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argDeclarationsList ::= argDeclaration 
            {
              ArgdeclList RESULT =null;
		int argDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Argdecl argDecl = (Argdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new ArgdeclList(argDecl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDeclarationsList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argDeclaration ::= type ID 
            {
              Argdecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Argdecl(type, id, false);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // argDeclaration ::= type ID SQUARE_OPEN SQUARE_CLOSE 
            {
              Argdecl RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Argdecl(type, id, true);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= stmt stmts 
            {
              Stmts RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss.prepend(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmts ::= 
            {
              Stmts RESULT =null;
		 RESULT = new Stmts(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmts ::= IF ROUND_OPEN expr ROUND_CLOSE stmt ELSE stmt stmts 
            {
              Stmts RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Stmt st1 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int st2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss.prepend(new Stmt(ex, st1, st2));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmts ::= IF ROUND_OPEN expr ROUND_CLOSE stmt stmts 
            {
              Stmts RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int st1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int st1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st1 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmts ss = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss.prepend(new Stmt(ex, st1, null));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= WHILE ROUND_OPEN expr ROUND_CLOSE stmt 
            {
              Stmt RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt statement = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Stmt(expression, statement); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= name EQUALS expr SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Stmt(n, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= READ ROUND_OPEN readList ROUND_CLOSE SEMICOLON 
            {
              Stmt RESULT =null;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(rl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= PRINT ROUND_OPEN printList ROUND_CLOSE SEMICOLON 
            {
              Stmt RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(pl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= PRINTLINE ROUND_OPEN printLineList ROUND_CLOSE SEMICOLON 
            {
              Stmt RESULT =null;
		int pllleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pllright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Printlinelist pll = (Printlinelist)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(pll);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= ID ROUND_OPEN ROUND_CLOSE SEMICOLON 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
			RESULT = new Stmt(id);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= ID ROUND_OPEN arguments ROUND_CLOSE SEMICOLON 
            {
              Stmt RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(id, args);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= RETURN SEMICOLON 
            {
              Stmt RESULT =null;
			RESULT = new Stmt();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN expr SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Stmt(e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= name INCR SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(n,"++", true);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= name DECR SEMICOLON 
            {
              Stmt RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(n,"--", true);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= CURLY_OPEN fieldDeclarations stmts CURLY_CLOSE SEMICOLON 
            {
              Stmt RESULT =null;
		int fieldDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fieldDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Fielddecls fieldDecls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Stmt(fieldDecls, sts, true);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= CURLY_OPEN fieldDeclarations stmts CURLY_CLOSE 
            {
              Stmt RESULT =null;
		int fieldDeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fieldDeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Fielddecls fieldDecls = (Fielddecls)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmts sts = (Stmts)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Stmt(fieldDecls, sts, false);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // readList ::= name COMMA readList 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Readlist rl = (Readlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Readlist(n,rl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // readList ::= name 
            {
              Readlist RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Readlist(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readList",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // name ::= ID 
            {
              Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Name(id);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // name ::= ID SQUARE_OPEN expr SQUARE_CLOSE 
            {
              Name RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Name(id, expression);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("name",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // printLineList ::= printList 
            {
              Printlinelist RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Printlinelist(pl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printLineList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printLineList ::= 
            {
              Printlinelist RESULT =null;
			RESULT = new Printlinelist();	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printLineList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printList ::= expr COMMA printList 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Printlist pl = (Printlist)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Printlist(e, pl);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printList ::= expr 
            {
              Printlist RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Printlist(e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("printList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // optionalSemi ::= SEMICOLON 
            {
              String RESULT =null;
			RESULT = ";";	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemi",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // optionalSemi ::= 
            {
              String RESULT =null;
			RESULT = ""; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalSemi",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // arguments ::= expr COMMA arguments 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Args(e,args);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // arguments ::= expr 
            {
              Args RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Args(e);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= name 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Name n = (Name)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Expr(n);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= ID ROUND_OPEN ROUND_CLOSE 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
			RESULT = new Expr(id, (Args) null);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= ID ROUND_OPEN arguments ROUND_CLOSE 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Args args = (Args)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Expr(id, args);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= ROUND_OPEN expr ROUND_CLOSE 
            {
              Expr RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
			RESULT = new Expr(expression, "()");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= INTLIT 
            {
              Expr RESULT =null;
		int expressionNumberleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionNumberright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		int expressionNumber = (int)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(expressionNumber);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= FLOATLIT 
            {
              Expr RESULT =null;
		int expressionFloatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionFloatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		float expressionFloat = (float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(expressionFloat);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= CHARLIT 
            {
              Expr RESULT =null;
		int charLiteralleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charLiteralright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String charLiteral = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(charLiteral, "char");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= STRLIT 
            {
              Expr RESULT =null;
		int stringLiteralleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringLiteralright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringLiteral = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(stringLiteral, "string");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= TRUE 
            {
              Expr RESULT =null;
			RESULT = new Expr(true);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= FALSE 
            {
              Expr RESULT =null;
			RESULT = new Expr(false);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= NOT expr 
            {
              Expr RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(expression, "~");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(expression, "+");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(expression, "-");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= ROUND_OPEN type ROUND_CLOSE expr 
            {
              Expr RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr expression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(type, expression);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= binaryOperations 
            {
              Expr RESULT =null;
		int binaryexpressionsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int binaryexpressionsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Binaryoperations binaryexpressions = (Binaryoperations)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Expr(binaryexpressions);	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= ROUND_OPEN expr QUESTION expr COLON expr ROUND_CLOSE 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e3 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Expr(e1, e2, e3);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= FLOAT 
            {
              String RESULT =null;
		 RESULT = "float"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type ::= BOOL 
            {
              String RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type ::= CHAR 
            {
              String RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= VOID 
            {
              String RESULT =null;
			RESULT = "void";	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // binaryOperations ::= expr MULTIPLY expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "*");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // binaryOperations ::= expr DIVIDE expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "/");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // binaryOperations ::= expr PLUS expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "+");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // binaryOperations ::= expr MINUS expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "-");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // binaryOperations ::= expr LESSTHAN expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "<");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // binaryOperations ::= expr GREATERTHAN expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, ">");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // binaryOperations ::= expr LESSTHANEQUAL expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "< =");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binaryOperations ::= expr GREATERTHANEQUAL expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "> =");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // binaryOperations ::= expr EQUALSCHECK expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "==");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // binaryOperations ::= expr NOTEQUAL expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "<>");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // binaryOperations ::= expr OR expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "||");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // binaryOperations ::= expr AND expr 
            {
              Binaryoperations RESULT =null;
		int leftExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int leftExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr leftExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rightExpressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rightExpressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr rightExpression = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = new Binaryoperations(leftExpression, rightExpression, "&&");	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("binaryOperations",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
